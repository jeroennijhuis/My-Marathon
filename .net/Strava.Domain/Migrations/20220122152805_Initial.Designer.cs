// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Strava.Domain;

#nullable disable

namespace Strava.Domain.Migrations
{
    [DbContext(typeof(StravaContext))]
    [Migration("20220122152805_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Strava.Domain.Models.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AchievementCount")
                        .HasColumnType("integer");

                    b.Property<byte>("ActivityType")
                        .HasColumnType("smallint");

                    b.Property<int>("AthleteCount")
                        .HasColumnType("integer");

                    b.Property<long>("AthleteId")
                        .HasColumnType("bigint");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<decimal>("Calories")
                        .HasColumnType("numeric");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("integer");

                    b.Property<float>("ElevationMax")
                        .HasColumnType("real");

                    b.Property<float>("ElevationMin")
                        .HasColumnType("real");

                    b.Property<float>("ElevationTotal")
                        .HasColumnType("real");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<int>("KudosCount")
                        .HasColumnType("integer");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("real");

                    b.Property<int>("MovingTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Strava.Domain.Models.Athlete", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Strava.Domain.Models.Split", b =>
                {
                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("integer");

                    b.Property<float>("Elevation")
                        .HasColumnType("real");

                    b.Property<int>("MovingTime")
                        .HasColumnType("integer");

                    b.Property<int>("PaceZone")
                        .HasColumnType("integer");

                    b.HasKey("ActivityId", "Type", "Index");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("Strava.Domain.Models.Activity", b =>
                {
                    b.HasOne("Strava.Domain.Models.Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("Strava.Domain.Models.Split", b =>
                {
                    b.HasOne("Strava.Domain.Models.Activity", "Activity")
                        .WithMany("Splits")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strava.Domain.Models.Activity", b =>
                {
                    b.Navigation("Splits");
                });

            modelBuilder.Entity("Strava.Domain.Models.Athlete", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
